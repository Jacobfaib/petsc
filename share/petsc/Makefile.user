# -*- mode: makefile -*-

# This sample (GNU) Makefile can be used to compile PETSc applications with a single source file
# and can be easily modified to compile multi-file applications.  For example
#
#  $ cd src/snes/examples/tutorials/
#  $ make -f $PETSC_DIR/share/petsc/Makefile.user ex17
#
# For a multi-file case, suppose you have the source files a.c, b.cpp, and c.F90, with main defined
# in c.F90 (i.e., there is a program statement).  If the file b.cpp needs to link with a C++ standard
# library, then you'll need to add it explicitly in this circumstance.  Copy this file to your source
# directory as "Makefile", add the two lines below at the end, and run "make app" to build your app.
#
# app : a.o b.o c.F90
#	$(LINK.F) -o $@ $^ $(LDLIBS) -lstdc++

PETSc.pc := $(PETSC_DIR)/$(PETSC_ARCH)/lib/pkgconfig/PETSc.pc

CC := $(shell pkg-config --variable=ccompiler $(PETSc.pc))
CXX := $(shell pkg-config --variable=cxxcompiler $(PETSc.pc))
FC := $(shell pkg-config --variable=fcompiler $(PETSc.pc))
CFLAGS_OTHER := $(shell pkg-config --cflags-only-other $(PETSc.pc))
CFLAGS := $(shell pkg-config --variable=cflags_extra $(PETSc.pc)) $(CFLAGS_OTHER)
CXXFLAGS := $(shell pkg-config --variable=cxxflags_extra $(PETSc.pc)) $(CFLAGS_OTHER)
FFLAGS := $(shell pkg-config --variable=fflags_extra $(PETSc.pc))
CPPFLAGS := $(shell pkg-config --cflags-only-I $(PETSc.pc))
LDFLAGS := $(shell pkg-config --libs-only-L --libs-only-other $(PETSc.pc))
LDFLAGS += $(patsubst -L%, $(shell pkg-config --variable=ldflag_rpath $(PETSc.pc))%, $(shell pkg-config --libs-only-L $(PETSc.pc)))
LDLIBS := $(shell pkg-config --libs-only-l $(PETSc.pc)) -lm

print:
	@echo CC=$(CC)
	@echo CFLAGS=$(CFLAGS)
	@echo CPPFLAGS=$(CPPFLAGS)
	@echo LDFLAGS=$(LDFLAGS)
	@echo LDLIBS=$(LDLIBS)

%.o : %.F90
	$(FC) $(FFLAGS) $(CPPFLAGS) -c $^
