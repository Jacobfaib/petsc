# -*- mode: makefile -*-

# This sample (GNU) Makefile can be used to compile PETSc applications with a single source file
# and can be easily modified to compile multi-file applications.  For example
#
#  $ cd src/snes/examples/tutorials/
#  $ make -f $PETSC_DIR/share/petsc/Makefile.user ex17
#
# For a multi-file case, suppose you have the source files a.c, b.cpp, and c.F90, with main defined
# in c.F90 (i.e., there is a program statement).  If the file b.cpp needs to link with a C++ standard
# library, then you'll need to add it explicitly in this circumstance.  Copy this file to your source
# directory as "Makefile", add the two lines below at the end, and run "make app" to build your app.
#
# app : a.o b.o c.F90
#	$(LINK.F) -o $@ $^ $(LDLIBS) -lstdc++

# This variable must either be a path to PETSc.pc or just "PETSc" if PETSc.pc has been
# installed to a system location or can be found in PKG_CONFIG_PATH.
PETSc.pc := $(PETSC_DIR)/$(PETSC_ARCH)/lib/pkgconfig/PETSc.pc

# Additional libraries that support pkg-config can be added to the list of PACKAGES below.
PACKAGES := $(PETSc.pc)

CC := $(shell pkg-config --variable=ccompiler $(PACKAGES))
CXX := $(shell pkg-config --variable=cxxcompiler $(PACKAGES))
FC := $(shell pkg-config --variable=fcompiler $(PACKAGES))
CFLAGS_OTHER := $(shell pkg-config --cflags-only-other $(PACKAGES))
CFLAGS := $(shell pkg-config --variable=cflags_extra $(PACKAGES)) $(CFLAGS_OTHER)
CXXFLAGS := $(shell pkg-config --variable=cxxflags_extra $(PACKAGES)) $(CFLAGS_OTHER)
FFLAGS := $(shell pkg-config --variable=fflags_extra $(PACKAGES))
CPPFLAGS := $(shell pkg-config --cflags-only-I $(PACKAGES))
LDFLAGS := $(shell pkg-config --libs-only-L --libs-only-other $(PACKAGES))
LDFLAGS += $(patsubst -L%, $(shell pkg-config --variable=ldflag_rpath $(PACKAGES))%, $(shell pkg-config --libs-only-L $(PACKAGES)))
LDLIBS := $(shell pkg-config --libs-only-l $(PACKAGES)) -lm

print:
	@echo CC=$(CC)
	@echo CXX=$(CXX)
	@echo FC=$(FC)
	@echo CFLAGS=$(CFLAGS)
	@echo CXXFLAGS=$(CXXFLAGS)
	@echo FFLAGS=$(FFLAGS)
	@echo CPPFLAGS=$(CPPFLAGS)
	@echo LDFLAGS=$(LDFLAGS)
	@echo LDLIBS=$(LDLIBS)

# Many suffixes are covered by implicit rules, but you may need to write custom rules
# such as this one if you use suffixes that do not have implicit rules.
# https://www.gnu.org/software/make/manual/html_node/Catalogue-of-Rules.html#Catalogue-of-Rules
% : %.F90
	$(LINK.F) -o $@ $^ $(LDLIBS)
